
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit but extend this class as needed
package org.openecomp.ncomp.servers.cdap;


import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.EList;

import org.openecomp.ncomp.sirius.manager.console.Console;
import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.ManagementServerError;




public class CdapCdapClusterConsole extends Console {
	public static final Logger logger = Logger.getLogger(CdapCdapClusterConsole.class);
    protected CdapCdapClusterClient controller;
    



    public CdapCdapClusterConsole(String filename, String name) {
            super(filename, name);
            controller = new CdapCdapClusterClient(filename,name);
            client = controller.client;

    }
    
	public CdapCdapClusterConsole(AbstractClient c) {
        controller = new CdapCdapClusterClient(c);
        client = controller.client;
    }


	public void poll(String path) {
		
		try {
			 controller.poll(path);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

	public java.lang.String createNamespace(String path, java.lang.String namespace) {
		java.lang.String res = null;
		try {
			res =  controller.createNamespace(path,namespace);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String deleteNamespace(String path, java.lang.String namespace) {
		java.lang.String res = null;
		try {
			res =  controller.deleteNamespace(path,namespace);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String deployApp(String path, java.lang.String namespace, java.lang.String jarfile) {
		java.lang.String res = null;
		try {
			res =  controller.deployApp(path,namespace,jarfile);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String loadArtifact(String path, java.lang.String namespace, java.lang.String artifactName, java.lang.String jarfile, java.lang.String version) {
		java.lang.String res = null;
		try {
			res =  controller.loadArtifact(path,namespace,artifactName,jarfile,version);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String deleteArtifact(String path, java.lang.String namespace, java.lang.String artifactName, java.lang.String artifactVersion) {
		java.lang.String res = null;
		try {
			res =  controller.deleteArtifact(path,namespace,artifactName,artifactVersion);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String startFlow(String path, java.lang.String namespace, java.lang.String appName, java.lang.String flowId, java.lang.String extraArgs) {
		java.lang.String res = null;
		try {
			res =  controller.startFlow(path,namespace,appName,flowId,extraArgs);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String startWorker(String path, java.lang.String namespace, java.lang.String appName, java.lang.String workerId, java.lang.String extraArgs) {
		java.lang.String res = null;
		try {
			res =  controller.startWorker(path,namespace,appName,workerId,extraArgs);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String startService(String path, java.lang.String namespace, java.lang.String appName, java.lang.String serviceId, java.lang.String extraArgs) {
		java.lang.String res = null;
		try {
			res =  controller.startService(path,namespace,appName,serviceId,extraArgs);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String startApp(String path, java.lang.String namespace, java.lang.String appName) {
		java.lang.String res = null;
		try {
			res =  controller.startApp(path,namespace,appName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String stopApp(String path, java.lang.String namespace, java.lang.String appName) {
		java.lang.String res = null;
		try {
			res =  controller.stopApp(path,namespace,appName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String deleteApp(String path, java.lang.String namespace, java.lang.String appName) {
		java.lang.String res = null;
		try {
			res =  controller.deleteApp(path,namespace,appName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String loadPreferencesApp(String path, java.lang.String namespace, java.lang.String prefsFile, java.lang.String appId) {
		java.lang.String res = null;
		try {
			res =  controller.loadPreferencesApp(path,namespace,prefsFile,appId);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String loadPreferencesFlow(String path, java.lang.String namespace, java.lang.String prefsFile, java.lang.String appId, java.lang.String flowId) {
		java.lang.String res = null;
		try {
			res =  controller.loadPreferencesFlow(path,namespace,prefsFile,appId,flowId);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String loadPreferencesNameSpace(String path, java.lang.String namespace, java.lang.String prefsFile) {
		java.lang.String res = null;
		try {
			res =  controller.loadPreferencesNameSpace(path,namespace,prefsFile);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String setPreferencesApp(String path, java.lang.String namespace, java.lang.String prefsString, java.lang.String appId) {
		java.lang.String res = null;
		try {
			res =  controller.setPreferencesApp(path,namespace,prefsString,appId);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String setPreferencesFlow(String path, java.lang.String namespace, java.lang.String prefsString, java.lang.String appId, java.lang.String flowId) {
		java.lang.String res = null;
		try {
			res =  controller.setPreferencesFlow(path,namespace,prefsString,appId,flowId);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String setPreferencesWorker(String path, java.lang.String namespace, java.lang.String prefsString, java.lang.String appId, java.lang.String workerId) {
		java.lang.String res = null;
		try {
			res =  controller.setPreferencesWorker(path,namespace,prefsString,appId,workerId);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String setPreferencesService(String path, java.lang.String namespace, java.lang.String prefsString, java.lang.String appId, java.lang.String serviceId) {
		java.lang.String res = null;
		try {
			res =  controller.setPreferencesService(path,namespace,prefsString,appId,serviceId);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String setPreferencesNameSpace(String path, java.lang.String namespace, java.lang.String prefsString) {
		java.lang.String res = null;
		try {
			res =  controller.setPreferencesNameSpace(path,namespace,prefsString);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String setFlowRunTimeArgs(String path, java.lang.String namespace, java.lang.String appId, java.lang.String flowId, java.lang.String args) {
		java.lang.String res = null;
		try {
			res =  controller.setFlowRunTimeArgs(path,namespace,appId,flowId,args);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String setFlowletInstances(String path, java.lang.String namespace, java.lang.String appId, java.lang.String flowId, java.lang.String flowletId, int nInstances) {
		java.lang.String res = null;
		try {
			res =  controller.setFlowletInstances(path,namespace,appId,flowId,flowletId,nInstances);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String stopFlow(String path, java.lang.String namespace, java.lang.String appId, java.lang.String flowId) {
		java.lang.String res = null;
		try {
			res =  controller.stopFlow(path,namespace,appId,flowId);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String stopWorker(String path, java.lang.String namespace, java.lang.String appId, java.lang.String workerId) {
		java.lang.String res = null;
		try {
			res =  controller.stopWorker(path,namespace,appId,workerId);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String stopService(String path, java.lang.String namespace, java.lang.String appId, java.lang.String serviceId) {
		java.lang.String res = null;
		try {
			res =  controller.stopService(path,namespace,appId,serviceId);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String truncateDataSet(String path, java.lang.String namespace, java.lang.String datasetName) {
		java.lang.String res = null;
		try {
			res =  controller.truncateDataSet(path,namespace,datasetName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String deleteDataset(String path, java.lang.String namespace, java.lang.String datasetName) {
		java.lang.String res = null;
		try {
			res =  controller.deleteDataset(path,namespace,datasetName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String createStream(String path, java.lang.String namespace, java.lang.String newStreamId) {
		java.lang.String res = null;
		try {
			res =  controller.createStream(path,namespace,newStreamId);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String deleteStream(String path, java.lang.String namespace, java.lang.String streamId) {
		java.lang.String res = null;
		try {
			res =  controller.deleteStream(path,namespace,streamId);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public EList<java.lang.String> getStreamEvents(String path, java.lang.String namespace, java.lang.String streamId, java.lang.String startTime, java.lang.String endTime, int limit) {
		EList<java.lang.String> res = null;
		try {
			res =  controller.getStreamEvents(path,namespace,streamId,startTime,endTime,limit);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public EList<java.lang.String> getStreamStats(String path, java.lang.String namespace, java.lang.String streamId, java.lang.String startTime, java.lang.String endTime, int limit) {
		EList<java.lang.String> res = null;
		try {
			res =  controller.getStreamStats(path,namespace,streamId,startTime,endTime,limit);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String sendEventToStream(String path, java.lang.String namespace, java.lang.String streamId, java.lang.String event) {
		java.lang.String res = null;
		try {
			res =  controller.sendEventToStream(path,namespace,streamId,event);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String trucateStream(String path, java.lang.String namespace, java.lang.String streamId) {
		java.lang.String res = null;
		try {
			res =  controller.trucateStream(path,namespace,streamId);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String setStreamProperties(String path, java.lang.String namespace, java.lang.String streamId, java.lang.String propsFile) {
		java.lang.String res = null;
		try {
			res =  controller.setStreamProperties(path,namespace,streamId,propsFile);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String restartApp(String path, java.lang.String namespace, java.lang.String appId, java.lang.String progTypes) {
		java.lang.String res = null;
		try {
			res =  controller.restartApp(path,namespace,appId,progTypes);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String createApp(String path, java.lang.String namespace, java.lang.String appId, java.lang.String artifactName, java.lang.String artifactVersion, java.lang.String scope) {
		java.lang.String res = null;
		try {
			res =  controller.createApp(path,namespace,appId,artifactName,artifactVersion,scope);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String createAppWithConfig(String path, java.lang.String namespace, java.lang.String appId, java.lang.String artifactName, java.lang.String artifactVersion, java.lang.String scope, java.lang.String appConfig) {
		java.lang.String res = null;
		try {
			res =  controller.createAppWithConfig(path,namespace,appId,artifactName,artifactVersion,scope,appConfig);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String setDatasetProperties(String path, java.lang.String namespace, java.lang.String datasetName, java.lang.String datasetProperties) {
		java.lang.String res = null;
		try {
			res =  controller.setDatasetProperties(path,namespace,datasetName,datasetProperties);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public java.lang.String setStreamTTL(String path, java.lang.String namespace, java.lang.String streamName, int ttlSeconds) {
		java.lang.String res = null;
		try {
			res =  controller.setStreamTTL(path,namespace,streamName,ttlSeconds);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

}
