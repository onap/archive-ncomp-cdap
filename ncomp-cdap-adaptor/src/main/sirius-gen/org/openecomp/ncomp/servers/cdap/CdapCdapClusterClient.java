
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.ncomp.servers.cdap;

import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.HighAvailabilityClient;
import org.openecomp.ncomp.sirius.manager.GenericHttpClient;

import org.apache.log4j.Logger;

import org.openecomp.logger.EcompLogger;
import org.openecomp.logger.StatusCodeEnum;
import org.openecomp.logger.EcompException;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;

import org.openecomp.ncomp.cdap.impl.CdapClusterImpl;
import org.openecomp.ncomp.cdap.CdapPackage;
import org.openecomp.ncomp.servers.cdap.logging.CdapClusterOperationEnum;
import org.openecomp.ncomp.servers.cdap.logging.CdapClusterMessageEnum;


import org.openecomp.ncomp.servers.cdap.CdapCdapAdaptor; 



 
@SuppressWarnings("unchecked")
public class CdapCdapClusterClient extends CdapClusterImpl {
	public static final Logger logger = Logger.getLogger(CdapCdapClusterClient.class);
	static final EcompLogger ecomplogger = EcompLogger.getEcompLogger();
	public AbstractClient client;

	public CdapCdapClusterClient(String file, String name) {
		CdapCdapAdaptor.ecoreSetup(); 
		client = new GenericHttpClient(file,name);
		client.add("/cluster", this);
		client.setVersion("ONAP-R2");
	}

	public CdapCdapClusterClient(String file, String name1, String name2) {
		HighAvailabilityClient client1 = new HighAvailabilityClient(file,name1,name2);
		client = client1.all; // requests should be forwarded to all.
		client.add("/cluster", this);
		client.setVersion("ONAP-R2");
	}
	
	public CdapCdapClusterClient(AbstractClient c) {
		client = c;
		client.add("/resources", this);
		client.setVersion("ONAP-R2");
	}



	
	public void poll(String path) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_poll,client.getRemote());
		
		try {
		  client.operationPath(path, c, "poll", null);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_poll, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_poll,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_poll,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	
	public java.lang.String createNamespace(String path, java.lang.String namespace) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_createNamespace,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "createNamespace", null, namespace);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_createNamespace, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_createNamespace,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_createNamespace,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String deleteNamespace(String path, java.lang.String namespace) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_deleteNamespace,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "deleteNamespace", null, namespace);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteNamespace, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteNamespace,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteNamespace,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String deployApp(String path, java.lang.String namespace, java.lang.String jarfile) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_deployApp,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "deployApp", null, namespace,jarfile);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_deployApp, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_deployApp,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_deployApp,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String loadArtifact(String path, java.lang.String namespace, java.lang.String artifactName, java.lang.String jarfile, java.lang.String version) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_loadArtifact,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "loadArtifact", null, namespace,artifactName,jarfile,version);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadArtifact, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadArtifact,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadArtifact,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String loadArtifactWithConfig(String path, java.lang.String namespace, java.lang.String artifactName, java.lang.String jarfile, java.lang.String version, java.lang.String config) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_loadArtifactWithConfig,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "loadArtifactWithConfig", null, namespace,artifactName,jarfile,version,config);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadArtifactWithConfig, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadArtifactWithConfig,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadArtifactWithConfig,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String deleteArtifact(String path, java.lang.String namespace, java.lang.String artifactName, java.lang.String artifactVersion) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_deleteArtifact,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "deleteArtifact", null, namespace,artifactName,artifactVersion);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteArtifact, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteArtifact,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteArtifact,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String startFlow(String path, java.lang.String namespace, java.lang.String appName, java.lang.String flowId, java.lang.String extraArgs) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_startFlow,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "startFlow", null, namespace,appName,flowId,extraArgs);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_startFlow, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_startFlow,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_startFlow,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String startWorker(String path, java.lang.String namespace, java.lang.String appName, java.lang.String workerId, java.lang.String extraArgs) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_startWorker,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "startWorker", null, namespace,appName,workerId,extraArgs);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_startWorker, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_startWorker,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_startWorker,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String startService(String path, java.lang.String namespace, java.lang.String appName, java.lang.String serviceId, java.lang.String extraArgs) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_startService,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "startService", null, namespace,appName,serviceId,extraArgs);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_startService, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_startService,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_startService,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String startApp(String path, java.lang.String namespace, java.lang.String appName) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_startApp,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "startApp", null, namespace,appName);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_startApp, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_startApp,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_startApp,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String stopApp(String path, java.lang.String namespace, java.lang.String appName) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_stopApp,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "stopApp", null, namespace,appName);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_stopApp, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_stopApp,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_stopApp,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String deleteApp(String path, java.lang.String namespace, java.lang.String appName) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_deleteApp,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "deleteApp", null, namespace,appName);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteApp, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteApp,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteApp,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String loadPreferencesApp(String path, java.lang.String namespace, java.lang.String prefsFile, java.lang.String appId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_loadPreferencesApp,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "loadPreferencesApp", null, namespace,prefsFile,appId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadPreferencesApp, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadPreferencesApp,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadPreferencesApp,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String loadPreferencesFlow(String path, java.lang.String namespace, java.lang.String prefsFile, java.lang.String appId, java.lang.String flowId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_loadPreferencesFlow,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "loadPreferencesFlow", null, namespace,prefsFile,appId,flowId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadPreferencesFlow, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadPreferencesFlow,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadPreferencesFlow,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String loadPreferencesNameSpace(String path, java.lang.String namespace, java.lang.String prefsFile) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_loadPreferencesNameSpace,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "loadPreferencesNameSpace", null, namespace,prefsFile);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadPreferencesNameSpace, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadPreferencesNameSpace,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_loadPreferencesNameSpace,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String setPreferencesApp(String path, java.lang.String namespace, java.lang.String prefsString, java.lang.String appId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_setPreferencesApp,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "setPreferencesApp", null, namespace,prefsString,appId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesApp, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesApp,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesApp,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String setPreferencesFlow(String path, java.lang.String namespace, java.lang.String prefsString, java.lang.String appId, java.lang.String flowId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_setPreferencesFlow,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "setPreferencesFlow", null, namespace,prefsString,appId,flowId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesFlow, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesFlow,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesFlow,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String setPreferencesWorker(String path, java.lang.String namespace, java.lang.String prefsString, java.lang.String appId, java.lang.String workerId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_setPreferencesWorker,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "setPreferencesWorker", null, namespace,prefsString,appId,workerId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesWorker, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesWorker,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesWorker,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String setPreferencesService(String path, java.lang.String namespace, java.lang.String prefsString, java.lang.String appId, java.lang.String serviceId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_setPreferencesService,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "setPreferencesService", null, namespace,prefsString,appId,serviceId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesService, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesService,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesService,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String setPreferencesNameSpace(String path, java.lang.String namespace, java.lang.String prefsString) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_setPreferencesNameSpace,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "setPreferencesNameSpace", null, namespace,prefsString);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesNameSpace, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesNameSpace,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_setPreferencesNameSpace,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String setFlowRunTimeArgs(String path, java.lang.String namespace, java.lang.String appId, java.lang.String flowId, java.lang.String args) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_setFlowRunTimeArgs,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "setFlowRunTimeArgs", null, namespace,appId,flowId,args);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setFlowRunTimeArgs, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setFlowRunTimeArgs,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_setFlowRunTimeArgs,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String setFlowletInstances(String path, java.lang.String namespace, java.lang.String appId, java.lang.String flowId, java.lang.String flowletId, int nInstances) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_setFlowletInstances,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "setFlowletInstances", null, namespace,appId,flowId,flowletId,nInstances);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setFlowletInstances, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setFlowletInstances,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_setFlowletInstances,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String stopFlow(String path, java.lang.String namespace, java.lang.String appId, java.lang.String flowId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_stopFlow,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "stopFlow", null, namespace,appId,flowId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_stopFlow, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_stopFlow,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_stopFlow,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String stopWorker(String path, java.lang.String namespace, java.lang.String appId, java.lang.String workerId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_stopWorker,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "stopWorker", null, namespace,appId,workerId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_stopWorker, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_stopWorker,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_stopWorker,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String stopService(String path, java.lang.String namespace, java.lang.String appId, java.lang.String serviceId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_stopService,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "stopService", null, namespace,appId,serviceId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_stopService, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_stopService,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_stopService,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String truncateDataSet(String path, java.lang.String namespace, java.lang.String datasetName) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_truncateDataSet,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "truncateDataSet", null, namespace,datasetName);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_truncateDataSet, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_truncateDataSet,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_truncateDataSet,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String deleteDataset(String path, java.lang.String namespace, java.lang.String datasetName) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_deleteDataset,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "deleteDataset", null, namespace,datasetName);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteDataset, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteDataset,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteDataset,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String createStream(String path, java.lang.String namespace, java.lang.String newStreamId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_createStream,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "createStream", null, namespace,newStreamId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_createStream, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_createStream,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_createStream,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String deleteStream(String path, java.lang.String namespace, java.lang.String streamId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_deleteStream,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "deleteStream", null, namespace,streamId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteStream, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteStream,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_deleteStream,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public EList<java.lang.String> getStreamEvents(String path, java.lang.String namespace, java.lang.String streamId, java.lang.String startTime, java.lang.String endTime, int limit) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_getStreamEvents,client.getRemote());
		EList<java.lang.String> res;
		try {
		  res = (EList<java.lang.String>) client.operationPath(path, c, "getStreamEvents", null, namespace,streamId,startTime,endTime,limit);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_getStreamEvents, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_getStreamEvents,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_getStreamEvents,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public EList<java.lang.String> getStreamStats(String path, java.lang.String namespace, java.lang.String streamId, java.lang.String startTime, java.lang.String endTime, int limit) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_getStreamStats,client.getRemote());
		EList<java.lang.String> res;
		try {
		  res = (EList<java.lang.String>) client.operationPath(path, c, "getStreamStats", null, namespace,streamId,startTime,endTime,limit);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_getStreamStats, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_getStreamStats,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_getStreamStats,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String sendEventToStream(String path, java.lang.String namespace, java.lang.String streamId, java.lang.String event) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_sendEventToStream,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "sendEventToStream", null, namespace,streamId,event);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_sendEventToStream, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_sendEventToStream,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_sendEventToStream,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String trucateStream(String path, java.lang.String namespace, java.lang.String streamId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_trucateStream,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "trucateStream", null, namespace,streamId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_trucateStream, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_trucateStream,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_trucateStream,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String setStreamProperties(String path, java.lang.String namespace, java.lang.String streamId, java.lang.String propsFile) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_setStreamProperties,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "setStreamProperties", null, namespace,streamId,propsFile);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setStreamProperties, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setStreamProperties,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_setStreamProperties,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String restartApp(String path, java.lang.String namespace, java.lang.String appId, java.lang.String progTypes) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_restartApp,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "restartApp", null, namespace,appId,progTypes);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_restartApp, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_restartApp,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_restartApp,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String createApp(String path, java.lang.String namespace, java.lang.String appId, java.lang.String artifactName, java.lang.String artifactVersion, java.lang.String scope) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_createApp,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "createApp", null, namespace,appId,artifactName,artifactVersion,scope);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_createApp, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_createApp,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_createApp,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String createAppWithConfig(String path, java.lang.String namespace, java.lang.String appId, java.lang.String artifactName, java.lang.String artifactVersion, java.lang.String scope, java.lang.String appConfig) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_createAppWithConfig,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "createAppWithConfig", null, namespace,appId,artifactName,artifactVersion,scope,appConfig);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_createAppWithConfig, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_createAppWithConfig,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_createAppWithConfig,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String setDatasetProperties(String path, java.lang.String namespace, java.lang.String datasetName, java.lang.String datasetProperties) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_setDatasetProperties,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "setDatasetProperties", null, namespace,datasetName,datasetProperties);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setDatasetProperties, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setDatasetProperties,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_setDatasetProperties,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String setStreamTTL(String path, java.lang.String namespace, java.lang.String streamName, int ttlSeconds) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_setStreamTTL,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "setStreamTTL", null, namespace,streamName,ttlSeconds);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setStreamTTL, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_setStreamTTL,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_setStreamTTL,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String suspendSchedule(String path, java.lang.String namespace, java.lang.String appId, java.lang.String scheduleId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_suspendSchedule,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "suspendSchedule", null, namespace,appId,scheduleId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_suspendSchedule, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_suspendSchedule,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_suspendSchedule,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	
	public java.lang.String resumeSchedule(String path, java.lang.String namespace, java.lang.String appId, java.lang.String scheduleId) {
		EClass c = CdapPackage.eINSTANCE.getCdapCluster(); 
		ecomplogger.recordMetricEventStart(CdapClusterOperationEnum.CdapCluster_resumeSchedule,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath(path, c, "resumeSchedule", null, namespace,appId,scheduleId);
		}
		catch (Exception e) {
			ecomplogger.warn(CdapClusterMessageEnum.REMOTE_CALL_FAILED_resumeSchedule, e.toString());
			EcompException e1 = EcompException.create(CdapClusterMessageEnum.REMOTE_CALL_FAILED_resumeSchedule,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CdapClusterMessageEnum.REMOTE_CALL_FAILED_resumeSchedule,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

}
